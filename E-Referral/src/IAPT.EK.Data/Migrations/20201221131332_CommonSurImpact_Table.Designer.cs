// <auto-generated />
using System;
using IAPT.EK.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IAPT.EK.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20201221131332_CommonSurImpact_Table")]
    partial class CommonSurImpact_Table
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eArmedForce", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Branch")
                        .HasColumnType("int");

                    b.Property<Guid>("EReferralId")
                        .HasColumnType("char(36)");

                    b.Property<string>("HasLinkedWithArmedForce")
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("MemberOfArmedForce")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ServiceNumber")
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("EReferralId")
                        .IsUnique();

                    b.ToTable("eArmedForces");
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eClinicalReferralInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("AccessedCurrentlyOtherService")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AccessedSMBefore")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AccessingService")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("AccessingServiceWorkName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AccessingServiceWorkService")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AccessingServiceWorkTel")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("ClinicalSupportService")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasMentalHealthDiag")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SMBeforeWhen")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StatedMentalHealth")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("eReferralId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("eReferralId")
                        .IsUnique();

                    b.ToTable("eClinicalReferralInfos");
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eCommonSurvivorImpact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CurrentTreatmentName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CurrentTreatmentService")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CurrentTreatmentTel")
                        .HasColumnType("varchar(30)");

                    b.Property<Guid>("EReferralId")
                        .HasColumnType("char(36)");

                    b.Property<string>("FinalComments")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("HasAnyIssuesWithDrugs")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("HasAnyIssuesWithDrugsDetail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("HasOrHadEngagedAnyDrugTreatment")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PrescribedAnyMedical")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PrescribedAnyMedicalDetails")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ProbationServiceOrCRC")
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("ServedOrCurrentlyUnderInvestiagtion")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("EReferralId")
                        .IsUnique();

                    b.ToTable("eCommonSurvivorImpacts");
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eIsvaReferralInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AttendSexualAssaultRefCenter")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<bool>("CurrentOpenInvestigation")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CurrentlyReceivingSupport")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsvaReferralService")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OfficerInChargeName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OfficerInChargeService")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OfficerInChargeTel")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("PoliceInvolved")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("VictimSupportBeenContact")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("eReferralId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("eReferralId")
                        .IsUnique();

                    b.ToTable("eIsvaReferralInfos");
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eLongTermPhysicalHealth", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Details")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("EReferralId")
                        .HasColumnType("char(36)");

                    b.Property<string>("HasClientLTPH")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("EReferralId")
                        .IsUnique();

                    b.ToTable("eLongTermPhysicalHealths");
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eOffence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Conviction")
                        .HasColumnType("varchar(30)");

                    b.Property<Guid>("ECommonSurvivorImpactId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LengthOfSentence")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("MonthYearSentence")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Offence")
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("ECommonSurvivorImpactId");

                    b.ToTable("eOffences");
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eProbationService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("ConsentToContact")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("ECommonSurvivorImpactId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Service")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Telephone")
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ECommonSurvivorImpactId");

                    b.ToTable("eProbationServices");
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eRiskIndicator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Details")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("EReferralId")
                        .HasColumnType("char(36)");

                    b.Property<string>("HasClientRisk")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("SelfHarmRisk")
                        .HasColumnType("int");

                    b.Property<int>("SuicideRisk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EReferralId")
                        .IsUnique();

                    b.ToTable("eRiskIndicators");
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ECommonSurvivorImpactId")
                        .HasColumnType("char(36)");

                    b.Property<string>("End")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Service")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Start")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TreatmentProvided")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ECommonSurvivorImpactId");

                    b.ToTable("eServices");
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eSexualOffence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AgeAtTimeOfOffence")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("BriefSummary")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("OffenceType")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("WhatWasGenderOfPerpetror")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("WhatWasRelationshipToPerpetror")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("WhenWasIt")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("eReferralId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("eReferralId")
                        .IsUnique();

                    b.ToTable("eSexualOffences");
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eTreatment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EClinicalReferralInfoID")
                        .HasColumnType("char(36)");

                    b.Property<string>("End")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Service")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Start")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TreatmentProvided")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("EClinicalReferralInfoID");

                    b.ToTable("eTreatments");
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.CCGCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Hub")
                        .HasColumnType("varchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("CCGCodes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f681d9e8-6b6a-41f4-87fe-551ac0ef3cf1"),
                            Code = "01G",
                            Description = "NHS Salford CCG",
                            Hub = "Q73"
                        },
                        new
                        {
                            Id = new Guid("3fa5e29c-f71f-4f44-b717-829aa5fba2e8"),
                            Code = "01M",
                            Description = "NHS North Manchester CCG"
                        },
                        new
                        {
                            Id = new Guid("4bf23608-2f42-470c-b55f-fc14e88cb323"),
                            Code = "01N",
                            Description = "NHS South Manchester CCG",
                            Hub = "Q73"
                        },
                        new
                        {
                            Id = new Guid("5366780f-a36a-4767-b7eb-bdb6f813a135"),
                            Code = "12F",
                            Description = "NHS Wirral CCG",
                            Hub = "Q75"
                        });
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ea3e7090-e1ba-437c-812c-806afdb20295"),
                            Name = "Liverpool"
                        },
                        new
                        {
                            Id = new Guid("1c499a70-3111-472c-a24d-ea41d06f2d68"),
                            Name = "Manchester"
                        },
                        new
                        {
                            Id = new Guid("5102c5d0-88f2-41b3-a63b-ce22549f6d69"),
                            Name = "Salfor"
                        },
                        new
                        {
                            Id = new Guid("6f3d5515-d99e-4f52-9222-abf0eea33402"),
                            Name = "York"
                        },
                        new
                        {
                            Id = new Guid("4f8be03a-a4ee-4952-8364-9d83a38b04e2"),
                            Name = "Leeds"
                        },
                        new
                        {
                            Id = new Guid("70aa335c-a610-49de-9398-77e4154a8eca"),
                            Name = "Chester"
                        },
                        new
                        {
                            Id = new Guid("030b0207-c79a-4722-a52b-95d6c54aed78"),
                            Name = "Oldhan"
                        },
                        new
                        {
                            Id = new Guid("4ecf19aa-9cfc-48fa-bc6f-78dfaabdb099"),
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.DisabilityCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("DisabilityCodes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7e9b6d2c-e59c-49d5-898b-0c738ebbf622"),
                            Code = "01",
                            Description = "Behaviour and Emotional"
                        },
                        new
                        {
                            Id = new Guid("d1e77164-a459-46c5-8d5d-587823ad43eb"),
                            Code = "02",
                            Description = "Hearing"
                        },
                        new
                        {
                            Id = new Guid("7dc56695-0e88-448d-ab0e-b99d9eed8c26"),
                            Code = "03",
                            Description = "Manual Dexterity"
                        },
                        new
                        {
                            Id = new Guid("910999fc-54e7-40f0-b246-1bc57c40b368"),
                            Code = "04",
                            Description = "Memory or ability to concentrate, learn or understand (Learning Disability)"
                        },
                        new
                        {
                            Id = new Guid("24e38103-cbec-477c-8bd1-0948d7101dc3"),
                            Code = "XX",
                            Description = "Other"
                        },
                        new
                        {
                            Id = new Guid("32d14317-4bf1-4e90-babd-c3a3b7380cb8"),
                            Code = "NN",
                            Description = "No Disability"
                        });
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.EthnicCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Sequence")
                        .HasColumnType("int(5)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("EthnicCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("542bd9b7-d271-4012-bc05-e4ff636cb8be"),
                            Code = "A",
                            Description = "White -British",
                            Sequence = 15
                        },
                        new
                        {
                            Id = new Guid("2c9fc4cc-7885-400d-a125-58aaf5d802ea"),
                            Code = "B",
                            Description = "White - Irish",
                            Sequence = 20
                        },
                        new
                        {
                            Id = new Guid("9e069cd1-b5a3-4b87-804c-7c2ae61aaa2c"),
                            Code = "C",
                            Description = "White - Any other White background",
                            Sequence = 23
                        },
                        new
                        {
                            Id = new Guid("0d5561cb-8ed4-4935-b37d-f0d0fab20515"),
                            Code = "D",
                            Description = "Mixed - White and Black Caribbean",
                            Sequence = 25
                        },
                        new
                        {
                            Id = new Guid("6839b0bb-6a2a-4a23-be6f-fa1a8013d53e"),
                            Code = "E",
                            Description = "Mixed - White and Black African",
                            Sequence = 30
                        },
                        new
                        {
                            Id = new Guid("c395e2ff-5663-4246-9b27-c0eaa52cedaa"),
                            Code = "F",
                            Description = "Mixed - White and Asian",
                            Sequence = 35
                        },
                        new
                        {
                            Id = new Guid("93d7fbf9-45ce-45d1-b44e-deec376eb29f"),
                            Code = "G",
                            Description = "Mixed - Any mixed backgroundn",
                            Sequence = 40
                        });
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.GPPractice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressLine3")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressLine4")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressLine5")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid?>("CCGCodeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PostCode")
                        .HasColumnType("varchar(8)");

                    b.HasKey("Id");

                    b.HasIndex("CCGCodeId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("GPPractices");
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.ReligiousGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("ReligiousGroups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("425b2089-5a84-4bfe-abcf-443b70ace405"),
                            Code = "A",
                            Description = "Baha'i"
                        },
                        new
                        {
                            Id = new Guid("1d84ff37-2a98-4622-b75a-85b8ac036266"),
                            Code = "B",
                            Description = "Buddhist"
                        },
                        new
                        {
                            Id = new Guid("a396d536-8ee0-446e-8fbf-7e262351a429"),
                            Code = "C",
                            Description = "Christian"
                        },
                        new
                        {
                            Id = new Guid("57f085e9-a409-4dd8-88d6-c7fead481dcc"),
                            Code = "D",
                            Description = "Hindu"
                        },
                        new
                        {
                            Id = new Guid("0233aadb-55c3-420f-b3d0-ee7923a84b52"),
                            Code = "E",
                            Description = "Jain"
                        },
                        new
                        {
                            Id = new Guid("3010ba47-2720-4931-9dc4-053eb217dc32"),
                            Code = "F",
                            Description = "Jewish"
                        },
                        new
                        {
                            Id = new Guid("b4c16ee9-4239-4084-81ea-189f7c131db1"),
                            Code = "G",
                            Description = "Muslim"
                        },
                        new
                        {
                            Id = new Guid("9da349a3-3f9e-49b3-ab31-7b833a54c3d3"),
                            Code = "H",
                            Description = "Pagan"
                        },
                        new
                        {
                            Id = new Guid("c42195e0-e3b6-4425-8ccb-b4476e79c876"),
                            Code = "I",
                            Description = "Sikh"
                        },
                        new
                        {
                            Id = new Guid("60690df1-205c-4b56-9374-2a9b8e8eb804"),
                            Code = "J",
                            Description = "Zoroastrian"
                        },
                        new
                        {
                            Id = new Guid("966d9938-5008-49ad-b5bb-bd6bb8360220"),
                            Code = "K",
                            Description = "Other"
                        },
                        new
                        {
                            Id = new Guid("981747c0-afc8-4074-ac63-a8c3e3e77e52"),
                            Code = "L",
                            Description = "None"
                        },
                        new
                        {
                            Id = new Guid("59f621d9-ab53-4a08-9d63-e973fc63c3c4"),
                            Code = "M",
                            Description = "Declines to Disclose"
                        },
                        new
                        {
                            Id = new Guid("632971b6-80fe-48b2-96a7-92dc7959e988"),
                            Code = "N",
                            Description = "Patient Religion Unknown"
                        });
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.eAgencyInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Agency")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<bool>("AgencyHasClientConsent")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<Guid>("EReferralId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("EReferralId")
                        .IsUnique();

                    b.ToTable("EAgencyInformations");
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.eContactDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Address2")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EReferralId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<Guid?>("GpPracticeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("MethodsToContact")
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Mobile")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NHSNumber")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("anotherCity")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("EReferralId")
                        .IsUnique();

                    b.HasIndex("GpPracticeId");

                    b.ToTable("EContactDetails");
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.eDiversity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EReferralId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("EthnicCategoryId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IsgenderAssignedAtBirth")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MaritalStatus")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ParentalStatus")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhysicalDisability")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhysicalDisabilityState")
                        .HasColumnType("varchar(500)");

                    b.Property<Guid?>("ReligionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Sexuality")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SpecificSupportNeedState")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("SpecificSupportNeeds")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("EReferralId")
                        .IsUnique();

                    b.HasIndex("EthnicCategoryId");

                    b.HasIndex("ReligionId");

                    b.ToTable("EDiversities");
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.eReferral", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ReceivedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Source")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("EReferrals");
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eArmedForce", b =>
                {
                    b.HasOne("IAPT.EK.Business.Models.eReferral", "EReferral")
                        .WithOne("eArmedForce")
                        .HasForeignKey("IAPT.EK.Business.EReferral.Models.eArmedForce", "EReferralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eClinicalReferralInfo", b =>
                {
                    b.HasOne("IAPT.EK.Business.Models.eReferral", "eReferral")
                        .WithOne("EClinicalReferralInfo")
                        .HasForeignKey("IAPT.EK.Business.EReferral.Models.eClinicalReferralInfo", "eReferralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eCommonSurvivorImpact", b =>
                {
                    b.HasOne("IAPT.EK.Business.Models.eReferral", "eReferral")
                        .WithOne("eCommonSurvivorImpact")
                        .HasForeignKey("IAPT.EK.Business.EReferral.Models.eCommonSurvivorImpact", "EReferralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eIsvaReferralInfo", b =>
                {
                    b.HasOne("IAPT.EK.Business.Models.eReferral", "EReferral")
                        .WithOne("eIsvaReferralInfo")
                        .HasForeignKey("IAPT.EK.Business.EReferral.Models.eIsvaReferralInfo", "eReferralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eLongTermPhysicalHealth", b =>
                {
                    b.HasOne("IAPT.EK.Business.Models.eReferral", "eReferral")
                        .WithOne("eLongTermPhysicalHealth")
                        .HasForeignKey("IAPT.EK.Business.EReferral.Models.eLongTermPhysicalHealth", "EReferralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eOffence", b =>
                {
                    b.HasOne("IAPT.EK.Business.EReferral.Models.eCommonSurvivorImpact", "ECommonSurvivorImpact")
                        .WithMany("EOffences")
                        .HasForeignKey("ECommonSurvivorImpactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eProbationService", b =>
                {
                    b.HasOne("IAPT.EK.Business.EReferral.Models.eCommonSurvivorImpact", "ECommonSurvivorImpact")
                        .WithMany("EProbationServices")
                        .HasForeignKey("ECommonSurvivorImpactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eRiskIndicator", b =>
                {
                    b.HasOne("IAPT.EK.Business.Models.eReferral", "eReferral")
                        .WithOne("eRiskIndicator")
                        .HasForeignKey("IAPT.EK.Business.EReferral.Models.eRiskIndicator", "EReferralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eService", b =>
                {
                    b.HasOne("IAPT.EK.Business.EReferral.Models.eCommonSurvivorImpact", "ECommonSurvivorImpact")
                        .WithMany("EServices")
                        .HasForeignKey("ECommonSurvivorImpactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eSexualOffence", b =>
                {
                    b.HasOne("IAPT.EK.Business.Models.eReferral", "EReferral")
                        .WithOne("eSexualOffence")
                        .HasForeignKey("IAPT.EK.Business.EReferral.Models.eSexualOffence", "eReferralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eTreatment", b =>
                {
                    b.HasOne("IAPT.EK.Business.EReferral.Models.eClinicalReferralInfo", "eClinicalReferralInfo")
                        .WithMany("OtherServices")
                        .HasForeignKey("EClinicalReferralInfoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.GPPractice", b =>
                {
                    b.HasOne("IAPT.EK.Business.Models.CCGCode", "CCGCode")
                        .WithMany("GPPractices")
                        .HasForeignKey("CCGCodeId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.eAgencyInformation", b =>
                {
                    b.HasOne("IAPT.EK.Business.Models.eReferral", "eReferral")
                        .WithOne("eAgencyInformation")
                        .HasForeignKey("IAPT.EK.Business.Models.eAgencyInformation", "EReferralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.eContactDetail", b =>
                {
                    b.HasOne("IAPT.EK.Business.Models.City", "City")
                        .WithMany("EContactDetails")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("IAPT.EK.Business.Models.eReferral", "eReferral")
                        .WithOne("eContactDetail")
                        .HasForeignKey("IAPT.EK.Business.Models.eContactDetail", "EReferralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IAPT.EK.Business.Models.GPPractice", "GpPractice")
                        .WithMany("eContactDetails")
                        .HasForeignKey("GpPracticeId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.eDiversity", b =>
                {
                    b.HasOne("IAPT.EK.Business.Models.eReferral", "eReferral")
                        .WithOne("eDiversity")
                        .HasForeignKey("IAPT.EK.Business.Models.eDiversity", "EReferralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IAPT.EK.Business.Models.EthnicCategory", "EthnicCategory")
                        .WithMany("EDiversities")
                        .HasForeignKey("EthnicCategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("IAPT.EK.Business.Models.ReligiousGroup", "Religion")
                        .WithMany("EDiversities")
                        .HasForeignKey("ReligionId")
                        .OnDelete(DeleteBehavior.SetNull);
                });
#pragma warning restore 612, 618
        }
    }
}
