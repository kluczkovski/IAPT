// <auto-generated />
using System;
using IAPT.EK.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IAPT.EK.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210311131738_InitialTables")]
    partial class InitialTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eAgencyInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Agency")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<bool>("AgencyHasClientConsent")
                        .HasColumnType("bit");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<Guid>("EReferralId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("EReferralId")
                        .IsUnique();

                    b.ToTable("EAgencyInformations");
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eArmedForce", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Branch")
                        .HasColumnType("int");

                    b.Property<Guid>("EReferralId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HasLinkedWithArmedForce")
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("MemberOfArmedForce")
                        .HasColumnType("bit");

                    b.Property<string>("ServiceNumber")
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("EReferralId")
                        .IsUnique();

                    b.ToTable("eArmedForces");
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eClinicalReferralInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AccessedCurrentlyOtherService")
                        .HasColumnType("bit");

                    b.Property<bool>("AccessedSMBefore")
                        .HasColumnType("bit");

                    b.Property<bool>("AccessingService")
                        .HasColumnType("bit");

                    b.Property<string>("AccessingServiceWorkName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AccessingServiceWorkService")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AccessingServiceWorkTel")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("ClinicalSupportService")
                        .HasColumnType("bit");

                    b.Property<bool>("HasMentalHealthDiag")
                        .HasColumnType("bit");

                    b.Property<string>("SMBeforeWhen")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StatedMentalHealth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("eReferralId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("eReferralId")
                        .IsUnique();

                    b.ToTable("eClinicalReferralInfos");
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eCommonSurvivorImpact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CurrentTreatmentName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CurrentTreatmentService")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CurrentTreatmentTel")
                        .HasColumnType("varchar(30)");

                    b.Property<Guid>("EReferralId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FinalComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasAnyIssuesWithDrugs")
                        .HasColumnType("bit");

                    b.Property<string>("HasAnyIssuesWithDrugsDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HasOrHadEngagedAnyDrugTreatment")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PrescribedAnyMedical")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PrescribedAnyMedicalDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProbationServiceOrCRC")
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("ServedOrCurrentlyUnderInvestigation")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EReferralId")
                        .IsUnique();

                    b.ToTable("eCommonSurvivorImpacts");
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eContactDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Address2")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EReferralId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<Guid?>("GpPracticeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("MethodsToContact")
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Mobile")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NHSNumber")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("anotherCity")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("EReferralId")
                        .IsUnique();

                    b.HasIndex("GpPracticeId");

                    b.ToTable("EContactDetails");
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eDiversity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EReferralId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EthnicCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IsgenderAssignedAtBirth")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MaritalStatus")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ParentalStatus")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhysicalDisability")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhysicalDisabilityState")
                        .HasColumnType("varchar(500)");

                    b.Property<Guid?>("ReligionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Sexuality")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SpecificSupportNeedState")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("SpecificSupportNeeds")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("EReferralId")
                        .IsUnique();

                    b.HasIndex("EthnicCategoryId");

                    b.HasIndex("ReligionId");

                    b.ToTable("EDiversities");
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eIsvaReferralInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AttendSexualAssaultRefCenter")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<bool>("CurrentOpenInvestigation")
                        .HasColumnType("bit");

                    b.Property<bool>("CurrentlyReceivingSupport")
                        .HasColumnType("bit");

                    b.Property<bool>("IsvaReferralService")
                        .HasColumnType("bit");

                    b.Property<string>("OfficerInChargeName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OfficerInChargeService")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OfficerInChargeTel")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("PoliceInvolved")
                        .HasColumnType("bit");

                    b.Property<bool>("VictimSupportBeenContact")
                        .HasColumnType("bit");

                    b.Property<Guid>("eReferralId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("eReferralId")
                        .IsUnique();

                    b.ToTable("eIsvaReferralInfos");
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eLongTermPhysicalHealth", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EReferralId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HasClientLTPH")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("EReferralId")
                        .IsUnique();

                    b.ToTable("eLongTermPhysicalHealths");
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eOffence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Conviction")
                        .HasColumnType("varchar(30)");

                    b.Property<Guid>("ECommonSurvivorImpactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LengthOfSentence")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("MonthYearSentence")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Offence")
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("ECommonSurvivorImpactId");

                    b.ToTable("eOffences");
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eProbationService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ConsentToContact")
                        .HasColumnType("bit");

                    b.Property<Guid>("ECommonSurvivorImpactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Service")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Telephone")
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ECommonSurvivorImpactId");

                    b.ToTable("eProbationServices");
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eReferral", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReceivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Source")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("EReferrals");
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eRiskIndicator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EReferralId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HasClientRisk")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("SelfHarmRisk")
                        .HasColumnType("int");

                    b.Property<int>("SuicideRisk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EReferralId")
                        .IsUnique();

                    b.ToTable("eRiskIndicators");
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ECommonSurvivorImpactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("End")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Service")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Start")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TreatmentProvided")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ECommonSurvivorImpactId");

                    b.ToTable("eServices");
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eSexualOffence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AgeAtTimeOfOffence")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("BriefSummary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OffenceType")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("WhatWasGenderOfPerpetror")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("WhatWasRelationshipToPerpetror")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("WhenWasIt")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("eReferralId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("eReferralId")
                        .IsUnique();

                    b.ToTable("eSexualOffences");
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eTreatment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EClinicalReferralInfoID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("End")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Service")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Start")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TreatmentProvided")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("EClinicalReferralInfoID");

                    b.ToTable("eTreatments");
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.CCGCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Hub")
                        .HasColumnType("varchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("CCGCodes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bb55d1e0-52e7-460e-a803-b68b0a26e5a7"),
                            Code = "01G",
                            Description = "NHS Salford CCG",
                            Hub = "Q73"
                        },
                        new
                        {
                            Id = new Guid("93f3a833-5efd-422b-8f17-213df5eff2cd"),
                            Code = "01M",
                            Description = "NHS North Manchester CCG"
                        },
                        new
                        {
                            Id = new Guid("880546c0-5a1d-4362-ac36-5877b4568f78"),
                            Code = "01N",
                            Description = "NHS South Manchester CCG",
                            Hub = "Q73"
                        },
                        new
                        {
                            Id = new Guid("f4cfab55-a07a-49fe-80c6-fcb7d68be2c4"),
                            Code = "12F",
                            Description = "NHS Wirral CCG",
                            Hub = "Q75"
                        });
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e4d7ae5d-7ec5-4bbf-a215-ee5172c5efe2"),
                            Name = "Liverpool"
                        },
                        new
                        {
                            Id = new Guid("d41c4240-a8cd-4b79-93d5-f81667fda458"),
                            Name = "Manchester"
                        },
                        new
                        {
                            Id = new Guid("13664d32-c73e-4b52-b9e3-4ba588832001"),
                            Name = "Salfor"
                        },
                        new
                        {
                            Id = new Guid("eda94419-7997-46b9-8b00-1ccec00af0a9"),
                            Name = "York"
                        },
                        new
                        {
                            Id = new Guid("462a8b76-827f-4028-b9ed-e09b60944f09"),
                            Name = "Leeds"
                        },
                        new
                        {
                            Id = new Guid("a44c7024-5ba2-410f-8b9f-1594dc122e13"),
                            Name = "Chester"
                        },
                        new
                        {
                            Id = new Guid("5a47ce65-1672-47f6-b865-b7e9f077c173"),
                            Name = "Oldhan"
                        },
                        new
                        {
                            Id = new Guid("1824dc7b-4373-4323-ada8-401a945c044b"),
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.DisabilityCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("DisabilityCodes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2f67b95c-b76d-4376-b964-93a78f92ad48"),
                            Code = "01",
                            Description = "Behaviour and Emotional"
                        },
                        new
                        {
                            Id = new Guid("a1d7e58e-d0e0-4515-bf59-fe98c52f24a8"),
                            Code = "02",
                            Description = "Hearing"
                        },
                        new
                        {
                            Id = new Guid("20465deb-31d6-42a7-95be-a369731f64f4"),
                            Code = "03",
                            Description = "Manual Dexterity"
                        },
                        new
                        {
                            Id = new Guid("8bc1ad23-9bc2-4395-bf57-189a25e8dab7"),
                            Code = "04",
                            Description = "Memory or ability to concentrate, learn or understand (Learning Disability)"
                        },
                        new
                        {
                            Id = new Guid("b6524e99-0b78-4862-a8f0-fe875ab243e3"),
                            Code = "XX",
                            Description = "Other"
                        },
                        new
                        {
                            Id = new Guid("19bd1950-78ef-4281-a570-26bd91da9abf"),
                            Code = "NN",
                            Description = "No Disability"
                        });
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.EthnicCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Sequence")
                        .HasColumnType("int(5)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("EthnicCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c4fe5163-4135-4265-a7ef-c4248501712d"),
                            Code = "A",
                            Description = "White -British",
                            Sequence = 15
                        },
                        new
                        {
                            Id = new Guid("f5e2d10f-7334-4043-95c6-b4a9734d37c7"),
                            Code = "B",
                            Description = "White - Irish",
                            Sequence = 20
                        },
                        new
                        {
                            Id = new Guid("9b466dfa-d984-4c27-af7f-a0c6c1ef5839"),
                            Code = "C",
                            Description = "White - Any other White background",
                            Sequence = 23
                        },
                        new
                        {
                            Id = new Guid("639b2727-aea7-4331-96c2-bdf99f9ae00b"),
                            Code = "D",
                            Description = "Mixed - White and Black Caribbean",
                            Sequence = 25
                        },
                        new
                        {
                            Id = new Guid("812827a5-9ec0-4879-b21c-d6633960f59f"),
                            Code = "E",
                            Description = "Mixed - White and Black African",
                            Sequence = 30
                        },
                        new
                        {
                            Id = new Guid("3acdf39a-98f2-49a5-bef6-45c1e331df94"),
                            Code = "F",
                            Description = "Mixed - White and Asian",
                            Sequence = 35
                        },
                        new
                        {
                            Id = new Guid("7e608cba-bb1b-4848-ad05-da6cce0f09f3"),
                            Code = "G",
                            Description = "Mixed - Any mixed backgroundn",
                            Sequence = 40
                        });
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.GPPractice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CCGCodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PostCode")
                        .HasColumnType("varchar(8)");

                    b.HasKey("Id");

                    b.HasIndex("CCGCodeId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("GPPractices");
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.ReligiousGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("ReligiousGroups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0c5f0c60-7cda-4954-aa96-eb807b7d2a8b"),
                            Code = "A",
                            Description = "Baha'i"
                        },
                        new
                        {
                            Id = new Guid("35a20e9f-b8d5-48b4-95c3-5f57f3877571"),
                            Code = "B",
                            Description = "Buddhist"
                        },
                        new
                        {
                            Id = new Guid("e9086520-7a6d-41fd-a62f-b38f6fb60874"),
                            Code = "C",
                            Description = "Christian"
                        },
                        new
                        {
                            Id = new Guid("16e82073-a6b0-4579-ade5-d180fe534995"),
                            Code = "D",
                            Description = "Hindu"
                        },
                        new
                        {
                            Id = new Guid("46aa7699-af81-4c79-8d44-dac4894aa280"),
                            Code = "E",
                            Description = "Jain"
                        },
                        new
                        {
                            Id = new Guid("56f8b973-0643-418e-964a-60d1c8cb77cd"),
                            Code = "F",
                            Description = "Jewish"
                        },
                        new
                        {
                            Id = new Guid("b66f1a95-44cf-46c3-80c9-d05e1e734225"),
                            Code = "G",
                            Description = "Muslim"
                        },
                        new
                        {
                            Id = new Guid("1906c7fc-297d-4e41-bbf5-c8e602021627"),
                            Code = "H",
                            Description = "Pagan"
                        },
                        new
                        {
                            Id = new Guid("e3b0bace-bf59-4308-b06b-70c373533e0d"),
                            Code = "I",
                            Description = "Sikh"
                        },
                        new
                        {
                            Id = new Guid("587ee53a-677b-47e4-9d4c-ff26e6e20224"),
                            Code = "J",
                            Description = "Zoroastrian"
                        },
                        new
                        {
                            Id = new Guid("838f4a3a-7cc1-4483-ac89-275bd8fe6685"),
                            Code = "K",
                            Description = "Other"
                        },
                        new
                        {
                            Id = new Guid("92e88df6-23ca-46a9-aebf-f4ecabd87e69"),
                            Code = "L",
                            Description = "None"
                        },
                        new
                        {
                            Id = new Guid("04c15bc2-d3a5-4298-9e0d-0b0959a907da"),
                            Code = "M",
                            Description = "Declines to Disclose"
                        },
                        new
                        {
                            Id = new Guid("4ed7f383-982c-485b-95c1-7de0f987aac4"),
                            Code = "N",
                            Description = "Patient Religion Unknown"
                        });
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eAgencyInformation", b =>
                {
                    b.HasOne("IAPT.EK.Business.EReferral.Models.eReferral", "eReferral")
                        .WithOne("eAgencyInformation")
                        .HasForeignKey("IAPT.EK.Business.EReferral.Models.eAgencyInformation", "EReferralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eArmedForce", b =>
                {
                    b.HasOne("IAPT.EK.Business.EReferral.Models.eReferral", "EReferral")
                        .WithOne("eArmedForce")
                        .HasForeignKey("IAPT.EK.Business.EReferral.Models.eArmedForce", "EReferralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eClinicalReferralInfo", b =>
                {
                    b.HasOne("IAPT.EK.Business.EReferral.Models.eReferral", "eReferral")
                        .WithOne("EClinicalReferralInfo")
                        .HasForeignKey("IAPT.EK.Business.EReferral.Models.eClinicalReferralInfo", "eReferralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eCommonSurvivorImpact", b =>
                {
                    b.HasOne("IAPT.EK.Business.EReferral.Models.eReferral", "eReferral")
                        .WithOne("eCommonSurvivorImpact")
                        .HasForeignKey("IAPT.EK.Business.EReferral.Models.eCommonSurvivorImpact", "EReferralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eContactDetail", b =>
                {
                    b.HasOne("IAPT.EK.Business.Models.City", "City")
                        .WithMany("EContactDetails")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("IAPT.EK.Business.EReferral.Models.eReferral", "eReferral")
                        .WithOne("eContactDetail")
                        .HasForeignKey("IAPT.EK.Business.EReferral.Models.eContactDetail", "EReferralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IAPT.EK.Business.Models.GPPractice", "GpPractice")
                        .WithMany("eContactDetails")
                        .HasForeignKey("GpPracticeId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eDiversity", b =>
                {
                    b.HasOne("IAPT.EK.Business.EReferral.Models.eReferral", "eReferral")
                        .WithOne("eDiversity")
                        .HasForeignKey("IAPT.EK.Business.EReferral.Models.eDiversity", "EReferralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IAPT.EK.Business.Models.EthnicCategory", "EthnicCategory")
                        .WithMany("EDiversities")
                        .HasForeignKey("EthnicCategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("IAPT.EK.Business.Models.ReligiousGroup", "Religion")
                        .WithMany("EDiversities")
                        .HasForeignKey("ReligionId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eIsvaReferralInfo", b =>
                {
                    b.HasOne("IAPT.EK.Business.EReferral.Models.eReferral", "EReferral")
                        .WithOne("eIsvaReferralInfo")
                        .HasForeignKey("IAPT.EK.Business.EReferral.Models.eIsvaReferralInfo", "eReferralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eLongTermPhysicalHealth", b =>
                {
                    b.HasOne("IAPT.EK.Business.EReferral.Models.eReferral", "eReferral")
                        .WithOne("eLongTermPhysicalHealth")
                        .HasForeignKey("IAPT.EK.Business.EReferral.Models.eLongTermPhysicalHealth", "EReferralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eOffence", b =>
                {
                    b.HasOne("IAPT.EK.Business.EReferral.Models.eCommonSurvivorImpact", "ECommonSurvivorImpact")
                        .WithMany("EOffences")
                        .HasForeignKey("ECommonSurvivorImpactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eProbationService", b =>
                {
                    b.HasOne("IAPT.EK.Business.EReferral.Models.eCommonSurvivorImpact", "ECommonSurvivorImpact")
                        .WithMany("EProbationServices")
                        .HasForeignKey("ECommonSurvivorImpactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eRiskIndicator", b =>
                {
                    b.HasOne("IAPT.EK.Business.EReferral.Models.eReferral", "eReferral")
                        .WithOne("eRiskIndicator")
                        .HasForeignKey("IAPT.EK.Business.EReferral.Models.eRiskIndicator", "EReferralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eService", b =>
                {
                    b.HasOne("IAPT.EK.Business.EReferral.Models.eCommonSurvivorImpact", "ECommonSurvivorImpact")
                        .WithMany("EServices")
                        .HasForeignKey("ECommonSurvivorImpactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eSexualOffence", b =>
                {
                    b.HasOne("IAPT.EK.Business.EReferral.Models.eReferral", "EReferral")
                        .WithOne("eSexualOffence")
                        .HasForeignKey("IAPT.EK.Business.EReferral.Models.eSexualOffence", "eReferralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eTreatment", b =>
                {
                    b.HasOne("IAPT.EK.Business.EReferral.Models.eClinicalReferralInfo", "eClinicalReferralInfo")
                        .WithMany("OtherServices")
                        .HasForeignKey("EClinicalReferralInfoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.GPPractice", b =>
                {
                    b.HasOne("IAPT.EK.Business.Models.CCGCode", "CCGCode")
                        .WithMany("GPPractices")
                        .HasForeignKey("CCGCodeId")
                        .OnDelete(DeleteBehavior.SetNull);
                });
#pragma warning restore 612, 618
        }
    }
}
