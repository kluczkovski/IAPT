// <auto-generated />
using System;
using IAPT.EK.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IAPT.EK.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20201210231927_eSexualOffence_Table")]
    partial class eSexualOffence_Table
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eArmedForce", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Branch")
                        .HasColumnType("int");

                    b.Property<Guid>("EReferralId")
                        .HasColumnType("char(36)");

                    b.Property<string>("HasLinkedWithArmedForce")
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("MemberOfArmedForce")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ServiceNumber")
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("EReferralId")
                        .IsUnique();

                    b.ToTable("eArmedForces");
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eClinicalReferralInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("AccessedCurrentlyOtherService")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AccessedSMBefore")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AccessingService")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("AccessingServiceWorkName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AccessingServiceWorkService")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AccessingServiceWorkTel")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("ClinicalSupportService")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasMentalHealthDiag")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SMBeforeWhen")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StatedMentalHealth")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("eReferralId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("eReferralId")
                        .IsUnique();

                    b.ToTable("eClinicalReferralInfos");
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eIsvaReferralInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AttendSexualAssaultRefCenter")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<bool>("CurrentOpenInvestigation")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CurrentlyReceivingSupport")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsvaReferralService")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OfficerInChargeName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OfficerInChargeService")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OfficerInChargeTel")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("PoliceInvolved")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("VictimSupportBeenContact")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("eReferralId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("eReferralId")
                        .IsUnique();

                    b.ToTable("eIsvaReferralInfos");
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eLongTermPhysicalHealth", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Details")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("EReferralId")
                        .HasColumnType("char(36)");

                    b.Property<string>("HasClientLTPH")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("EReferralId")
                        .IsUnique();

                    b.ToTable("eLongTermPhysicalHealths");
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eRiskIndicator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Details")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("EReferralId")
                        .HasColumnType("char(36)");

                    b.Property<string>("HasClientRisk")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("SelfHarmRisk")
                        .HasColumnType("int");

                    b.Property<int>("SuicideRisk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EReferralId")
                        .IsUnique();

                    b.ToTable("eRiskIndicators");
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eSexualOffence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AgeAtTimeOfOffence")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("BriefSummary")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("OffenceType")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("WhatWasGenderOfPerpetror")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("WhatWasRelationshipToPerpetror")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("WhenWasIt")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("eReferralId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("eReferralId")
                        .IsUnique();

                    b.ToTable("eSexualOffences");
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eTreatment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EClinicalReferralInfoID")
                        .HasColumnType("char(36)");

                    b.Property<string>("End")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Service")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Start")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TreatmentProvided")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("EClinicalReferralInfoID");

                    b.ToTable("eTreatments");
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.CCGCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Hub")
                        .HasColumnType("varchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("CCGCodes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6d6dc107-9b99-4564-8415-7829a5c2b58b"),
                            Code = "01G",
                            Description = "NHS Salford CCG",
                            Hub = "Q73"
                        },
                        new
                        {
                            Id = new Guid("3a12854a-2e6e-4476-af7d-4d01b664996f"),
                            Code = "01M",
                            Description = "NHS North Manchester CCG"
                        },
                        new
                        {
                            Id = new Guid("ad902290-0434-4381-b6b9-ca4a3137710e"),
                            Code = "01N",
                            Description = "NHS South Manchester CCG",
                            Hub = "Q73"
                        },
                        new
                        {
                            Id = new Guid("69140912-a874-4a48-80f8-a6f1a6372170"),
                            Code = "12F",
                            Description = "NHS Wirral CCG",
                            Hub = "Q75"
                        });
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("302b7b03-7a8e-40ad-8235-3e39ea088c8d"),
                            Name = "Liverpool"
                        },
                        new
                        {
                            Id = new Guid("d92112ab-a240-4b8f-8ad9-3d85d9ce8940"),
                            Name = "Manchester"
                        },
                        new
                        {
                            Id = new Guid("3b24e077-db28-4a32-8cca-0244d8ad183e"),
                            Name = "Salfor"
                        },
                        new
                        {
                            Id = new Guid("b3bef90d-950d-487b-97a7-63be6de902b7"),
                            Name = "York"
                        },
                        new
                        {
                            Id = new Guid("f4f03a08-958b-40f7-9ed1-312965e5285c"),
                            Name = "Leeds"
                        },
                        new
                        {
                            Id = new Guid("0d69bd9a-0b14-4402-b708-226a2e8ec555"),
                            Name = "Chester"
                        },
                        new
                        {
                            Id = new Guid("c5b8be18-4399-41ff-b21e-76776327a0b2"),
                            Name = "Oldhan"
                        },
                        new
                        {
                            Id = new Guid("25cb89ff-8427-464b-8160-069574824b3b"),
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.DisabilityCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("DisabilityCodes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a2a47242-c2ed-40ad-8484-e1e6a6b10def"),
                            Code = "01",
                            Description = "Behaviour and Emotional"
                        },
                        new
                        {
                            Id = new Guid("69080b46-2333-4218-9afb-77ecf7619487"),
                            Code = "02",
                            Description = "Hearing"
                        },
                        new
                        {
                            Id = new Guid("3fe8d8fc-415b-49c2-bd95-657b0f03c873"),
                            Code = "03",
                            Description = "Manual Dexterity"
                        },
                        new
                        {
                            Id = new Guid("3a58d3b9-30c0-4ecc-8957-9c2f5c3345c3"),
                            Code = "04",
                            Description = "Memory or ability to concentrate, learn or understand (Learning Disability)"
                        },
                        new
                        {
                            Id = new Guid("17eb97d9-0fd3-42d5-9c73-8bf227714d0b"),
                            Code = "XX",
                            Description = "Other"
                        },
                        new
                        {
                            Id = new Guid("89878637-5186-4ee3-a1f4-af03c1b782e5"),
                            Code = "NN",
                            Description = "No Disability"
                        });
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.EthnicCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Sequence")
                        .HasColumnType("int(5)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("EthnicCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3bc217a9-d953-4523-abe8-538e4282a5e1"),
                            Code = "A",
                            Description = "White -British",
                            Sequence = 15
                        },
                        new
                        {
                            Id = new Guid("80e3b93d-5775-49c3-b17b-ea4b2b062485"),
                            Code = "B",
                            Description = "White - Irish",
                            Sequence = 20
                        },
                        new
                        {
                            Id = new Guid("e33fc592-2eef-421c-b44d-4c8ba57bde5e"),
                            Code = "C",
                            Description = "White - Any other White background",
                            Sequence = 23
                        },
                        new
                        {
                            Id = new Guid("2136e47f-0956-4463-8b29-a4133fc13f76"),
                            Code = "D",
                            Description = "Mixed - White and Black Caribbean",
                            Sequence = 25
                        },
                        new
                        {
                            Id = new Guid("c661014d-1237-4fe5-82bf-946880696fb8"),
                            Code = "E",
                            Description = "Mixed - White and Black African",
                            Sequence = 30
                        },
                        new
                        {
                            Id = new Guid("c1ded129-e4e0-4da5-ab1a-32c95175870a"),
                            Code = "F",
                            Description = "Mixed - White and Asian",
                            Sequence = 35
                        },
                        new
                        {
                            Id = new Guid("c443f143-265f-4ca6-8d6c-70e4b5f6d8f2"),
                            Code = "G",
                            Description = "Mixed - Any mixed backgroundn",
                            Sequence = 40
                        });
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.GPPractice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressLine3")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressLine4")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressLine5")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid?>("CCGCodeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PostCode")
                        .HasColumnType("varchar(8)");

                    b.HasKey("Id");

                    b.HasIndex("CCGCodeId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("GPPractices");
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.ReligiousGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("ReligiousGroups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5da0d852-5202-4a80-a873-1ac60489ab2b"),
                            Code = "A",
                            Description = "Baha'i"
                        },
                        new
                        {
                            Id = new Guid("0628c1db-56df-4458-9d73-c889719d4378"),
                            Code = "B",
                            Description = "Buddhist"
                        },
                        new
                        {
                            Id = new Guid("0ceebc1b-3299-4324-b94a-eec69a7d74dc"),
                            Code = "C",
                            Description = "Christian"
                        },
                        new
                        {
                            Id = new Guid("39cb756b-cdd9-4987-abfa-f5e631fbc796"),
                            Code = "D",
                            Description = "Hindu"
                        },
                        new
                        {
                            Id = new Guid("6463a4a4-9f4b-494b-a1e3-c2cf8953974b"),
                            Code = "E",
                            Description = "Jain"
                        },
                        new
                        {
                            Id = new Guid("be69180b-7624-4a25-9624-f946ff8ffe2b"),
                            Code = "F",
                            Description = "Jewish"
                        },
                        new
                        {
                            Id = new Guid("fb28e847-d240-4f5d-aa29-bfcc5b41b879"),
                            Code = "G",
                            Description = "Muslim"
                        },
                        new
                        {
                            Id = new Guid("a5e91529-5f02-4190-bf4e-365ee2ba2b27"),
                            Code = "H",
                            Description = "Pagan"
                        },
                        new
                        {
                            Id = new Guid("59045659-4b68-4ef3-8c27-33810191b98c"),
                            Code = "I",
                            Description = "Sikh"
                        },
                        new
                        {
                            Id = new Guid("95f7e91d-78ef-4fc6-93ac-7c4255d55cd4"),
                            Code = "J",
                            Description = "Zoroastrian"
                        },
                        new
                        {
                            Id = new Guid("7a66f76e-05aa-49cb-9b39-d89b99de13cf"),
                            Code = "K",
                            Description = "Other"
                        },
                        new
                        {
                            Id = new Guid("f86c5ea8-e0bf-49c5-9081-5f339f7df2cf"),
                            Code = "L",
                            Description = "None"
                        },
                        new
                        {
                            Id = new Guid("a1973ce7-d726-49f9-8a4e-a09c30a4d1e1"),
                            Code = "M",
                            Description = "Declines to Disclose"
                        },
                        new
                        {
                            Id = new Guid("cf90b2f4-8a27-4503-bfec-a0e87018acd7"),
                            Code = "N",
                            Description = "Patient Religion Unknown"
                        });
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.eAgencyInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Agency")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<bool>("AgencyHasClientConsent")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<Guid>("EReferralId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("EReferralId")
                        .IsUnique();

                    b.ToTable("EAgencyInformations");
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.eContactDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Address2")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EReferralId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<Guid?>("GpPracticeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("MethodsToContact")
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Mobile")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NHSNumber")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("anotherCity")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("EReferralId")
                        .IsUnique();

                    b.HasIndex("GpPracticeId");

                    b.ToTable("EContactDetails");
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.eDiversity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EReferralId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("EthnicCategoryId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IsgenderAssignedAtBirth")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MaritalStatus")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ParentalStatus")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhysicalDisability")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhysicalDisabilityState")
                        .HasColumnType("varchar(500)");

                    b.Property<Guid?>("ReligionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Sexuality")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SpecificSupportNeedState")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("SpecificSupportNeeds")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("EReferralId")
                        .IsUnique();

                    b.HasIndex("EthnicCategoryId");

                    b.HasIndex("ReligionId");

                    b.ToTable("EDiversities");
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.eReferral", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ReceivedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Source")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("EReferrals");
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eArmedForce", b =>
                {
                    b.HasOne("IAPT.EK.Business.Models.eReferral", "EReferral")
                        .WithOne("eArmedForce")
                        .HasForeignKey("IAPT.EK.Business.EReferral.Models.eArmedForce", "EReferralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eClinicalReferralInfo", b =>
                {
                    b.HasOne("IAPT.EK.Business.Models.eReferral", "eReferral")
                        .WithOne("EClinicalReferralInfo")
                        .HasForeignKey("IAPT.EK.Business.EReferral.Models.eClinicalReferralInfo", "eReferralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eIsvaReferralInfo", b =>
                {
                    b.HasOne("IAPT.EK.Business.Models.eReferral", "EReferral")
                        .WithOne("eIsvaReferralInfo")
                        .HasForeignKey("IAPT.EK.Business.EReferral.Models.eIsvaReferralInfo", "eReferralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eLongTermPhysicalHealth", b =>
                {
                    b.HasOne("IAPT.EK.Business.Models.eReferral", "eReferral")
                        .WithOne("eLongTermPhysicalHealth")
                        .HasForeignKey("IAPT.EK.Business.EReferral.Models.eLongTermPhysicalHealth", "EReferralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eRiskIndicator", b =>
                {
                    b.HasOne("IAPT.EK.Business.Models.eReferral", "eReferral")
                        .WithOne("eRiskIndicator")
                        .HasForeignKey("IAPT.EK.Business.EReferral.Models.eRiskIndicator", "EReferralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eSexualOffence", b =>
                {
                    b.HasOne("IAPT.EK.Business.Models.eReferral", "EReferral")
                        .WithOne("eSexualOffence")
                        .HasForeignKey("IAPT.EK.Business.EReferral.Models.eSexualOffence", "eReferralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eTreatment", b =>
                {
                    b.HasOne("IAPT.EK.Business.EReferral.Models.eClinicalReferralInfo", "eClinicalReferralInfo")
                        .WithMany("OtherServices")
                        .HasForeignKey("EClinicalReferralInfoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.GPPractice", b =>
                {
                    b.HasOne("IAPT.EK.Business.Models.CCGCode", "CCGCode")
                        .WithMany("GPPractices")
                        .HasForeignKey("CCGCodeId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.eAgencyInformation", b =>
                {
                    b.HasOne("IAPT.EK.Business.Models.eReferral", "eReferral")
                        .WithOne("eAgencyInformation")
                        .HasForeignKey("IAPT.EK.Business.Models.eAgencyInformation", "EReferralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.eContactDetail", b =>
                {
                    b.HasOne("IAPT.EK.Business.Models.City", "City")
                        .WithMany("EContactDetails")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("IAPT.EK.Business.Models.eReferral", "eReferral")
                        .WithOne("eContactDetail")
                        .HasForeignKey("IAPT.EK.Business.Models.eContactDetail", "EReferralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IAPT.EK.Business.Models.GPPractice", "GpPractice")
                        .WithMany("eContactDetails")
                        .HasForeignKey("GpPracticeId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.eDiversity", b =>
                {
                    b.HasOne("IAPT.EK.Business.Models.eReferral", "eReferral")
                        .WithOne("eDiversity")
                        .HasForeignKey("IAPT.EK.Business.Models.eDiversity", "EReferralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IAPT.EK.Business.Models.EthnicCategory", "EthnicCategory")
                        .WithMany("EDiversities")
                        .HasForeignKey("EthnicCategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("IAPT.EK.Business.Models.ReligiousGroup", "Religion")
                        .WithMany("EDiversities")
                        .HasForeignKey("ReligionId")
                        .OnDelete(DeleteBehavior.SetNull);
                });
#pragma warning restore 612, 618
        }
    }
}
