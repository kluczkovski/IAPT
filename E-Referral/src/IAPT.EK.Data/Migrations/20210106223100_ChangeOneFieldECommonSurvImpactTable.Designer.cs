// <auto-generated />
using System;
using IAPT.EK.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IAPT.EK.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210106223100_ChangeOneFieldECommonSurvImpactTable")]
    partial class ChangeOneFieldECommonSurvImpactTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eArmedForce", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Branch")
                        .HasColumnType("int");

                    b.Property<Guid>("EReferralId")
                        .HasColumnType("char(36)");

                    b.Property<string>("HasLinkedWithArmedForce")
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("MemberOfArmedForce")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ServiceNumber")
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("EReferralId")
                        .IsUnique();

                    b.ToTable("eArmedForces");
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eClinicalReferralInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("AccessedCurrentlyOtherService")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AccessedSMBefore")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AccessingService")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("AccessingServiceWorkName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AccessingServiceWorkService")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AccessingServiceWorkTel")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("ClinicalSupportService")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasMentalHealthDiag")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SMBeforeWhen")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StatedMentalHealth")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("eReferralId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("eReferralId")
                        .IsUnique();

                    b.ToTable("eClinicalReferralInfos");
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eCommonSurvivorImpact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CurrentTreatmentName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CurrentTreatmentService")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CurrentTreatmentTel")
                        .HasColumnType("varchar(30)");

                    b.Property<Guid>("EReferralId")
                        .HasColumnType("char(36)");

                    b.Property<string>("FinalComments")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("HasAnyIssuesWithDrugs")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("HasAnyIssuesWithDrugsDetail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("HasOrHadEngagedAnyDrugTreatment")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PrescribedAnyMedical")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PrescribedAnyMedicalDetails")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ProbationServiceOrCRC")
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("ServedOrCurrentlyUnderInvestigation")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("EReferralId")
                        .IsUnique();

                    b.ToTable("eCommonSurvivorImpacts");
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eIsvaReferralInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AttendSexualAssaultRefCenter")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<bool>("CurrentOpenInvestigation")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CurrentlyReceivingSupport")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsvaReferralService")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OfficerInChargeName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OfficerInChargeService")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OfficerInChargeTel")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("PoliceInvolved")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("VictimSupportBeenContact")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("eReferralId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("eReferralId")
                        .IsUnique();

                    b.ToTable("eIsvaReferralInfos");
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eLongTermPhysicalHealth", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Details")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("EReferralId")
                        .HasColumnType("char(36)");

                    b.Property<string>("HasClientLTPH")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("EReferralId")
                        .IsUnique();

                    b.ToTable("eLongTermPhysicalHealths");
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eOffence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Conviction")
                        .HasColumnType("varchar(30)");

                    b.Property<Guid>("ECommonSurvivorImpactId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LengthOfSentence")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("MonthYearSentence")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Offence")
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("ECommonSurvivorImpactId");

                    b.ToTable("eOffences");
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eProbationService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("ConsentToContact")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("ECommonSurvivorImpactId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Service")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Telephone")
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ECommonSurvivorImpactId");

                    b.ToTable("eProbationServices");
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eRiskIndicator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Details")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("EReferralId")
                        .HasColumnType("char(36)");

                    b.Property<string>("HasClientRisk")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("SelfHarmRisk")
                        .HasColumnType("int");

                    b.Property<int>("SuicideRisk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EReferralId")
                        .IsUnique();

                    b.ToTable("eRiskIndicators");
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ECommonSurvivorImpactId")
                        .HasColumnType("char(36)");

                    b.Property<string>("End")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Service")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Start")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TreatmentProvided")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ECommonSurvivorImpactId");

                    b.ToTable("eServices");
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eSexualOffence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AgeAtTimeOfOffence")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("BriefSummary")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("OffenceType")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("WhatWasGenderOfPerpetror")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("WhatWasRelationshipToPerpetror")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("WhenWasIt")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("eReferralId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("eReferralId")
                        .IsUnique();

                    b.ToTable("eSexualOffences");
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eTreatment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EClinicalReferralInfoID")
                        .HasColumnType("char(36)");

                    b.Property<string>("End")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Service")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Start")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TreatmentProvided")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("EClinicalReferralInfoID");

                    b.ToTable("eTreatments");
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.CCGCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Hub")
                        .HasColumnType("varchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("CCGCodes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fa4a6c6f-e133-40aa-9c7f-b0ff21da4c42"),
                            Code = "01G",
                            Description = "NHS Salford CCG",
                            Hub = "Q73"
                        },
                        new
                        {
                            Id = new Guid("09749016-2b22-4561-b34f-04b3ff11ad43"),
                            Code = "01M",
                            Description = "NHS North Manchester CCG"
                        },
                        new
                        {
                            Id = new Guid("020f19e8-1a8e-4b48-ae0d-ef5371b3dccd"),
                            Code = "01N",
                            Description = "NHS South Manchester CCG",
                            Hub = "Q73"
                        },
                        new
                        {
                            Id = new Guid("737e33a8-b34f-4e4b-bb37-044d1d1f51ac"),
                            Code = "12F",
                            Description = "NHS Wirral CCG",
                            Hub = "Q75"
                        });
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0d9a3810-fdb8-4ede-8db4-e6ef3e3f4dcf"),
                            Name = "Liverpool"
                        },
                        new
                        {
                            Id = new Guid("f601187f-75c4-4e86-aa69-a4f2f3eaa5bc"),
                            Name = "Manchester"
                        },
                        new
                        {
                            Id = new Guid("258be96b-7e8d-4177-a0b9-feff6ea4f1e0"),
                            Name = "Salfor"
                        },
                        new
                        {
                            Id = new Guid("a95f9c73-4923-491a-91a3-cfead369845a"),
                            Name = "York"
                        },
                        new
                        {
                            Id = new Guid("6e455f23-a817-41e4-858d-3286d3a4f16a"),
                            Name = "Leeds"
                        },
                        new
                        {
                            Id = new Guid("15c91e11-fb1a-4e05-b77a-48595e69062a"),
                            Name = "Chester"
                        },
                        new
                        {
                            Id = new Guid("bd6faa0e-a0ac-4fdd-9d84-ba427abe33d0"),
                            Name = "Oldhan"
                        },
                        new
                        {
                            Id = new Guid("4b0fb160-ccd3-4acc-8dd0-9b3391466d22"),
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.DisabilityCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("DisabilityCodes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a47ce8f0-3279-4191-b567-0c9ead311460"),
                            Code = "01",
                            Description = "Behaviour and Emotional"
                        },
                        new
                        {
                            Id = new Guid("e3702e37-f1b2-4ab8-86ce-2d769340c885"),
                            Code = "02",
                            Description = "Hearing"
                        },
                        new
                        {
                            Id = new Guid("3a8b9418-b940-4545-a027-277a140d7bcd"),
                            Code = "03",
                            Description = "Manual Dexterity"
                        },
                        new
                        {
                            Id = new Guid("d2c6bd70-37a5-4345-9f6b-2f45209d05a8"),
                            Code = "04",
                            Description = "Memory or ability to concentrate, learn or understand (Learning Disability)"
                        },
                        new
                        {
                            Id = new Guid("1af119bf-29da-483e-b301-03c249e8b3af"),
                            Code = "XX",
                            Description = "Other"
                        },
                        new
                        {
                            Id = new Guid("ad6ef5c6-7706-4431-a85c-2bc94f61ff68"),
                            Code = "NN",
                            Description = "No Disability"
                        });
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.EthnicCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Sequence")
                        .HasColumnType("int(5)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("EthnicCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0c6c1a04-4ee5-4ed1-9c91-924d1934f737"),
                            Code = "A",
                            Description = "White -British",
                            Sequence = 15
                        },
                        new
                        {
                            Id = new Guid("305d3e75-cbea-45a3-b6a1-12b12e9bc654"),
                            Code = "B",
                            Description = "White - Irish",
                            Sequence = 20
                        },
                        new
                        {
                            Id = new Guid("fb1a21db-2704-4c10-9dd9-be06678a6513"),
                            Code = "C",
                            Description = "White - Any other White background",
                            Sequence = 23
                        },
                        new
                        {
                            Id = new Guid("baeb98f8-33a1-4ef8-9ea1-5b94cc5cf5e6"),
                            Code = "D",
                            Description = "Mixed - White and Black Caribbean",
                            Sequence = 25
                        },
                        new
                        {
                            Id = new Guid("4ad047cb-1960-4b08-a68b-d4c68231176f"),
                            Code = "E",
                            Description = "Mixed - White and Black African",
                            Sequence = 30
                        },
                        new
                        {
                            Id = new Guid("ed41d6f4-dfe3-4fab-9ccd-ff085302f819"),
                            Code = "F",
                            Description = "Mixed - White and Asian",
                            Sequence = 35
                        },
                        new
                        {
                            Id = new Guid("9ac55b20-fc0a-47aa-ae34-2b1bbf5d0afc"),
                            Code = "G",
                            Description = "Mixed - Any mixed backgroundn",
                            Sequence = 40
                        });
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.GPPractice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressLine3")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressLine4")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressLine5")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid?>("CCGCodeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PostCode")
                        .HasColumnType("varchar(8)");

                    b.HasKey("Id");

                    b.HasIndex("CCGCodeId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("GPPractices");
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.ReligiousGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("ReligiousGroups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("45c7ef0d-8cbc-4a19-84f9-93077d49814a"),
                            Code = "A",
                            Description = "Baha'i"
                        },
                        new
                        {
                            Id = new Guid("b12d905d-9f36-42aa-a1fe-d8deb61f2def"),
                            Code = "B",
                            Description = "Buddhist"
                        },
                        new
                        {
                            Id = new Guid("b51126a6-a2d8-4397-9eb3-b18d15b75594"),
                            Code = "C",
                            Description = "Christian"
                        },
                        new
                        {
                            Id = new Guid("870a4107-5cb5-4152-b444-2edcd9271cbe"),
                            Code = "D",
                            Description = "Hindu"
                        },
                        new
                        {
                            Id = new Guid("f3224334-5bcd-4417-98a0-269abcdc36b3"),
                            Code = "E",
                            Description = "Jain"
                        },
                        new
                        {
                            Id = new Guid("7d9627b3-5549-4eef-9d3a-9cc13608f472"),
                            Code = "F",
                            Description = "Jewish"
                        },
                        new
                        {
                            Id = new Guid("c87ea713-f4b0-45e7-96a6-1e801cb25f42"),
                            Code = "G",
                            Description = "Muslim"
                        },
                        new
                        {
                            Id = new Guid("81b0fc2d-2f53-4a03-8b51-471408dab7cf"),
                            Code = "H",
                            Description = "Pagan"
                        },
                        new
                        {
                            Id = new Guid("445a999c-9360-4786-b0e3-79109ee46162"),
                            Code = "I",
                            Description = "Sikh"
                        },
                        new
                        {
                            Id = new Guid("e05b7239-c545-435a-b5fc-662cfa50d5d0"),
                            Code = "J",
                            Description = "Zoroastrian"
                        },
                        new
                        {
                            Id = new Guid("70479e49-d7b5-4e6a-a13f-4a7d1cde886c"),
                            Code = "K",
                            Description = "Other"
                        },
                        new
                        {
                            Id = new Guid("8d8836f2-5da7-4ea3-9d1a-d72080869aa5"),
                            Code = "L",
                            Description = "None"
                        },
                        new
                        {
                            Id = new Guid("07429971-268b-47ac-9bde-a0a366ade746"),
                            Code = "M",
                            Description = "Declines to Disclose"
                        },
                        new
                        {
                            Id = new Guid("19b2788c-60f8-45a0-8c26-ce8f0f3fa980"),
                            Code = "N",
                            Description = "Patient Religion Unknown"
                        });
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.eAgencyInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Agency")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<bool>("AgencyHasClientConsent")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<Guid>("EReferralId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("EReferralId")
                        .IsUnique();

                    b.ToTable("EAgencyInformations");
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.eContactDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Address2")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EReferralId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<Guid?>("GpPracticeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("MethodsToContact")
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Mobile")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NHSNumber")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("anotherCity")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("EReferralId")
                        .IsUnique();

                    b.HasIndex("GpPracticeId");

                    b.ToTable("EContactDetails");
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.eDiversity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EReferralId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("EthnicCategoryId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IsgenderAssignedAtBirth")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MaritalStatus")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ParentalStatus")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhysicalDisability")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhysicalDisabilityState")
                        .HasColumnType("varchar(500)");

                    b.Property<Guid?>("ReligionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Sexuality")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SpecificSupportNeedState")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("SpecificSupportNeeds")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("EReferralId")
                        .IsUnique();

                    b.HasIndex("EthnicCategoryId");

                    b.HasIndex("ReligionId");

                    b.ToTable("EDiversities");
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.eReferral", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ReceivedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Source")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("EReferrals");
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eArmedForce", b =>
                {
                    b.HasOne("IAPT.EK.Business.Models.eReferral", "EReferral")
                        .WithOne("eArmedForce")
                        .HasForeignKey("IAPT.EK.Business.EReferral.Models.eArmedForce", "EReferralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eClinicalReferralInfo", b =>
                {
                    b.HasOne("IAPT.EK.Business.Models.eReferral", "eReferral")
                        .WithOne("EClinicalReferralInfo")
                        .HasForeignKey("IAPT.EK.Business.EReferral.Models.eClinicalReferralInfo", "eReferralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eCommonSurvivorImpact", b =>
                {
                    b.HasOne("IAPT.EK.Business.Models.eReferral", "eReferral")
                        .WithOne("eCommonSurvivorImpact")
                        .HasForeignKey("IAPT.EK.Business.EReferral.Models.eCommonSurvivorImpact", "EReferralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eIsvaReferralInfo", b =>
                {
                    b.HasOne("IAPT.EK.Business.Models.eReferral", "EReferral")
                        .WithOne("eIsvaReferralInfo")
                        .HasForeignKey("IAPT.EK.Business.EReferral.Models.eIsvaReferralInfo", "eReferralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eLongTermPhysicalHealth", b =>
                {
                    b.HasOne("IAPT.EK.Business.Models.eReferral", "eReferral")
                        .WithOne("eLongTermPhysicalHealth")
                        .HasForeignKey("IAPT.EK.Business.EReferral.Models.eLongTermPhysicalHealth", "EReferralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eOffence", b =>
                {
                    b.HasOne("IAPT.EK.Business.EReferral.Models.eCommonSurvivorImpact", "ECommonSurvivorImpact")
                        .WithMany("EOffences")
                        .HasForeignKey("ECommonSurvivorImpactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eProbationService", b =>
                {
                    b.HasOne("IAPT.EK.Business.EReferral.Models.eCommonSurvivorImpact", "ECommonSurvivorImpact")
                        .WithMany("EProbationServices")
                        .HasForeignKey("ECommonSurvivorImpactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eRiskIndicator", b =>
                {
                    b.HasOne("IAPT.EK.Business.Models.eReferral", "eReferral")
                        .WithOne("eRiskIndicator")
                        .HasForeignKey("IAPT.EK.Business.EReferral.Models.eRiskIndicator", "EReferralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eService", b =>
                {
                    b.HasOne("IAPT.EK.Business.EReferral.Models.eCommonSurvivorImpact", "ECommonSurvivorImpact")
                        .WithMany("EServices")
                        .HasForeignKey("ECommonSurvivorImpactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eSexualOffence", b =>
                {
                    b.HasOne("IAPT.EK.Business.Models.eReferral", "EReferral")
                        .WithOne("eSexualOffence")
                        .HasForeignKey("IAPT.EK.Business.EReferral.Models.eSexualOffence", "eReferralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IAPT.EK.Business.EReferral.Models.eTreatment", b =>
                {
                    b.HasOne("IAPT.EK.Business.EReferral.Models.eClinicalReferralInfo", "eClinicalReferralInfo")
                        .WithMany("OtherServices")
                        .HasForeignKey("EClinicalReferralInfoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.GPPractice", b =>
                {
                    b.HasOne("IAPT.EK.Business.Models.CCGCode", "CCGCode")
                        .WithMany("GPPractices")
                        .HasForeignKey("CCGCodeId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.eAgencyInformation", b =>
                {
                    b.HasOne("IAPT.EK.Business.Models.eReferral", "eReferral")
                        .WithOne("eAgencyInformation")
                        .HasForeignKey("IAPT.EK.Business.Models.eAgencyInformation", "EReferralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.eContactDetail", b =>
                {
                    b.HasOne("IAPT.EK.Business.Models.City", "City")
                        .WithMany("EContactDetails")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("IAPT.EK.Business.Models.eReferral", "eReferral")
                        .WithOne("eContactDetail")
                        .HasForeignKey("IAPT.EK.Business.Models.eContactDetail", "EReferralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IAPT.EK.Business.Models.GPPractice", "GpPractice")
                        .WithMany("eContactDetails")
                        .HasForeignKey("GpPracticeId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("IAPT.EK.Business.Models.eDiversity", b =>
                {
                    b.HasOne("IAPT.EK.Business.Models.eReferral", "eReferral")
                        .WithOne("eDiversity")
                        .HasForeignKey("IAPT.EK.Business.Models.eDiversity", "EReferralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IAPT.EK.Business.Models.EthnicCategory", "EthnicCategory")
                        .WithMany("EDiversities")
                        .HasForeignKey("EthnicCategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("IAPT.EK.Business.Models.ReligiousGroup", "Religion")
                        .WithMany("EDiversities")
                        .HasForeignKey("ReligionId")
                        .OnDelete(DeleteBehavior.SetNull);
                });
#pragma warning restore 612, 618
        }
    }
}
